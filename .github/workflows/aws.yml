name: Build and Deploy to Fargate

on:
  pull_request:
    types: [synchronize]

env:
  AWS_REGION: eu-west-1
  ECR_REPOSITORY: aws-movie-app-express
  ECS_SERVICE: aws-movie-app-express
  ECS_CLUSTER: lunarlogic_main_ecs_cluster
  ECS_TASK_DEFINITION: .aws/task-definition.json
  CONTAINER_NAME: app
  GITHUB_ROLE_ARN: arn:aws:iam::806227494574:role/aws-movie-app-express-gh-oidc-role

permissions:
  id-token: write
  contents: read

jobs:
  build_and_push:
    name: Build and push container
    if: ${{ github.event_name == 'pull_request' && github.event.action == 'synchronize' }}
    runs-on: ubuntu-latest
    environment: production

    steps:
    - name: Checkout
      uses: actions/checkout@v3

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        role-to-assume: ${{env.GITHUB_ROLE_ARN}}
        aws-region: ${{env.AWS_REGION}}
        mask-aws-account-id: no

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Build & tag
      id: build-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG -t $ECR_REGISTRY/$ECR_REPOSITORY:latest ./api

    - name: Push image to Amazon ECR
      id: push-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

    - name: Fill in the new image ID in the Amazon ECS task definition
      id: task-def
      uses: aws-actions/amazon-ecs-render-task-definition@v1
      with:
        task-definition: ${{ env.ECS_TASK_DEFINITION }}
        container-name: ${{ env.CONTAINER_NAME }}
        image: ${{ steps.push-image.outputs.image }}

    - name: Deploy Amazon ECS task definition
      uses: aws-actions/amazon-ecs-deploy-task-definition@v1
      with:
        task-definition: ${{ steps.task-def.outputs.task-definition }}
        service: ${{ env.ECS_SERVICE }}
        cluster: ${{ env.ECS_CLUSTER }}
        wait-for-service-stability: true
